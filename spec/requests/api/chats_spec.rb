require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/api/chats", type: :request do
  let(:valid_attributes) { 
    {
      id: "12345",
      type: "private",
      first_name: "Test name"
    }
   }
  let(:invalid_attributes) { 
    {
      first_name: "Test name"
    } 
  }
  let(:valid_headers) { {} }
  let(:text) { "Test message" }
  let(:message_attributes) {
    {
      text: text
    }
  }

  describe "GET /show" do
    it "renders a successful response" do
      chat = FactoryBot.create(:chat)
      get api_chat_url(chat), as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Chat and Message" do
        expect {
          post api_chats_url,
               params: { chat: valid_attributes, message: message_attributes }, headers: valid_headers, as: :json
        }.to change(Chat, :count).by(1)
      end

      it "creates a new Message for Chat" do
        post api_chats_url, params: { chat: valid_attributes, message: message_attributes }, headers: valid_headers, as: :json
        chat = Chat.last       
        expect(chat.messages.size).to eq(1)
      end

      it "renders a JSON response with the new api_chat" do
        post api_chats_url,
             params: { chat: valid_attributes, message: message_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Chat" do
        expect {
          post api_chats_url,
               params: { chat: invalid_attributes, message: message_attributes }, as: :json
        }.to change(Chat, :count).by(0)
      end

      it "renders a JSON response with errors for the new api_chat" do
        post api_chats_url,
             params: { chat: invalid_attributes, message: message_attributes  }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

end
